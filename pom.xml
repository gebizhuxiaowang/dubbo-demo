<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.8</version>
		<relativePath/>
	</parent>
	<groupId>com.example</groupId>
	<artifactId>dubbo-example</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>dubbo-example</name>
	<description>dubbo-example</description>
	<properties>
		<java.version>17</java.version>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<protoc.version>3.21.6</protoc.version>
		<compiler.version>0.0.4.1</compiler.version>
		<!--TODO  高版本GRPC gen 生成的代码有问题，待解决？-->
<!--		<grpc.version>1.53.0</grpc.version>-->
		<grpc.version>1.44.1</grpc.version>
		<logback.version>1.2.10</logback.version>
		<!--dubbo 3.2 依赖的最低fastjson2 版本2.0.20-->
		<fastjson.version>2.0.24</fastjson.version>
		TODO 3.2.0-beta.5 版本 无法使用postman 调试？待处理
<!--		<dubbo.version>3.1.5</dubbo.version>-->
		<dubbo.version>3.2.0-beta.5</dubbo.version>
		<dubbo-serialization-protobuf.version>2.7.22</dubbo-serialization-protobuf.version>
		<protobuf-java.version>3.21.12</protobuf-java.version>
		<spring-context-support.version>1.0.11</spring-context-support.version>
		<nacos.version>0.2.12</nacos.version>
		<micrometer.version>1.10.4</micrometer.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>

		<!-- dubbo starter -->
		<dependency>
			<groupId>org.apache.dubbo</groupId>
			<artifactId>dubbo-spring-boot-starter</artifactId>
			<version>${dubbo.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>${protobuf-java.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.dubbo</groupId>
			<artifactId>dubbo-serialization-protobuf</artifactId>
			<version>${dubbo-serialization-protobuf.version}</version>
			<exclusions>
				<!--引入dubbo相关的依赖时，会有依赖传递，必须要exclude相关冲突的资源-->
				<exclusion>
					<groupId>org.apache.dubbo</groupId>
					<artifactId>dubbo-common</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Dubbo Nacos registry dependency -->
		<!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-registry-nacos -->
		<dependency>
			<groupId>org.apache.dubbo</groupId>
			<artifactId>dubbo-registry-nacos</artifactId>
			<version>${dubbo.version}</version>
			<exclusions>
				<!--引入dubbo相关的依赖时，会有依赖传递，须要exclude相关冲突的资源-->
				<exclusion>
					<groupId>org.apache.dubbo</groupId>
					<artifactId>dubbo-common</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.dubbo</groupId>
					<artifactId>dubbo-remoting-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Alibaba Spring Context extension -->
		<dependency>
			<groupId>com.alibaba.spring</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring-context-support.version}</version>
		</dependency>
		<!-- Alibaba nacos -->
		<dependency>
			<groupId>com.alibaba.boot</groupId>
			<artifactId>nacos-config-spring-boot-starter</artifactId>
			<version>${nacos.version}</version>
		</dependency>
		<!--dubbo 3.2 依赖-->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-core</artifactId>
			<version>${micrometer.version}</version>
		</dependency>

	</dependencies>

	<build>
		<!--将resources 目录下的内容全部打包编译打包-->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>
		<extensions>
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.6.1</version>
			</extension>
		</extensions>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.7.3</version>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.xolstice.maven.plugins</groupId>
				<artifactId>protobuf-maven-plugin</artifactId>
				<version>0.6.1</version>
				<configuration>
					<protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}
					</protocArtifact>
					<pluginId>grpc-java</pluginId>
					<pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}
					</pluginArtifact>
					<protocPlugins>
						<protocPlugin>
							<id>dubbo</id>
							<groupId>org.apache.dubbo</groupId>
							<artifactId>dubbo-compiler</artifactId>
							<version>${compiler.version}</version>
							<mainClass>org.apache.dubbo.gen.tri.Dubbo3TripleGenerator</mainClass>
						</protocPlugin>
					</protocPlugins>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>test-compile</goal>
							<goal>compile-custom</goal>
							<goal>test-compile-custom</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
